package chap03.lecture.binary;

public class BitOperator {
	public static void main(String[] args) {
		// & | ^ ~ << >> >>> 가 있는 binary 연산자
		// 피연산자는 정수타입(byte, short, int, long)과 boolean type
		// 자주 사용하는 건 int 타입과 같이 사용
		// 결과는 정수타입쓰면 정수결과, boolean type 쓰면 boolean 결과
		
		// ~ 
		// 이진법으로 표현된 정수를 1 -> 0으로 0->1로 변환
		int i = 3;
		System.out.println(i);
		System.out.println(~i); // NOT 연산하면 비트가 반전되어서 -4가 나옴
		
		// &
		i = 10;
		int j = 25;
		System.out.println(i & j);
		// & 연산은 비트가 둘 다 1일때에만 결과가 1
		// 1 & 1은 ==> 1
		// 1 & 0 ==> 0
		// 0 & 1 ==> 0
		// 0 & 0 ==> 0
		// i가 10일때 0000 0000 0000 0000 0000 0000 0000 0000 1010
		// i가 25일때 0000 0000 0000 0000 0000 0000 0000 0001 1001
		// 결과는     0000 0000 0000 0000 0000 0000 0000 0000 1000 로 변해서 8이 나옴
		
		
		// | or 연산
		// 비트가 둘 다 0일 때에만 0이고 한쪽이라도 1이 있으면 1
		// 10과 25 or연산
		// i가 10일때 0000 0000 0000 0000 0000 0000 0000 0000 1010
		// i가 25일때 0000 0000 0000 0000 0000 0000 0000 0001 1001
		// 결과는     0000 0000 0000 0000 0000 0000 0000 0001 1011 로 변해서 27 이 나옴
		System.out.println( i | j );
		
		// ^ 배타적 논리합 
		// 비트가 다르면 1
		// i가 10일때 0000 0000 0000 0000 0000 0000 0000 0000 1010
		// i가 25일때 0000 0000 0000 0000 0000 0000 0000 0001 1001
		// 결과는     1111 1111 1111 1111 1111 1111 1111 1110 0011 로 변해서 19 이 나옴
		System.out.println(i ^ j);
	}
}
